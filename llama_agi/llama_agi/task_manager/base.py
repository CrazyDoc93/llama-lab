from abc import abstractmethod
from typing import List, Optional, NotRequired, TypedDict

from llama_index import Document, ServiceContext


class LlamaTaskPrompts(TypedDict):
    task_create_qa_template: NotRequired[str]
    task_create_refine_template: NotRequired[str]
    task_prioritize_qa_template: NotRequired[str]
    task_prioritize_refine_template: NotRequired[str]


class BaseTaskManager:
    def __init__(
        self,
        tasks: List[str],
        prompts: Optional[LlamaTaskPrompts] = None,
        task_service_context: Optional[ServiceContext] = None,
    ) -> None:
        self.current_tasks = [Document(x) for x in tasks]
        self.completed_tasks: List[Document] = []
        self.prompts = prompts if prompts else {}
        self.task_service_context = task_service_context

    @abstractmethod
    def parse_task_list(self, task_list_str: str) -> List[str]:
        """Parse new tasks generated by the agent."""

    @abstractmethod
    def get_completed_tasks_summary(self) -> str:
        """Generate a summary of completed tasks."""

    @abstractmethod
    def prioritize_tasks(self, objective: str) -> None:
        """Prioritize the current list of incomplete tasks."""

    @abstractmethod
    def generate_new_tasks(
        self, objective: str, prev_task: str, prev_result: str
    ) -> None:
        """Generate new tasks given the previous task and result."""

    @abstractmethod
    def get_next_task(self) -> str:
        """Get the next task to complete."""

    @abstractmethod
    def add_new_tasks(self, tasks: List[str]) -> None:
        """Add new tasks to the task manager."""

    @abstractmethod
    def add_completed_task(self, task: str, result: str) -> None:
        """Add a task as completed."""
